#include <STM32F4XX.H>
#include <STM32F4XX_RCC.H>
#include <STM32F4XX_DMA.H>
#include <STM32F4XX_DAC.H>
#include <STM32F4XX_TIM.H>
#include <STM32F4XX_GPIO.H>

#define Frequency 15625
#define Resolution 64
#define Timer_Period 0

const uint16_t function[Resolution] = { 0,0,0,0,424,424,424,424
										,424,424,424,424,1412,424,1412,424
										,1412,424,1412,424,1412,424,1412,424
										,1412,424,1412,424,1412,424,1412,424
										,1412,424,1412,424,1412,424,1412,424
										,1412,424,1412,424,1412,424,1412,424
										,1412,424,1412,424,1412,424,1412,424
										,1412,424,1412,424,1412,424,1412,424 };

void FG_GPIO_Configure()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4|GPIO_Pin_5;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
}

void FG_DAC_Configure()
{
	DAC_InitTypeDef DAC_InitStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);

	DAC_InitStructure.DAC_Trigger = DAC_Trigger_T4_TRGO;
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
	DAC_Init(DAC_Channel_1, &DAC_InitStructure);
	DAC_Cmd(DAC_Channel_1, ENABLE);

	DAC_InitStructure.DAC_Trigger = DAC_Trigger_T4_TRGO;
	DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
	DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
	DAC_Init(DAC_Channel_2, &DAC_InitStructure);
	DAC_Cmd(DAC_Channel_2, ENABLE);
}

void FG_Timer_Configure()
{
  TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM6, ENABLE);
  TIM_TimeBaseStructInit(&TIM_TimeBaseInitStructure);

  TIM_TimeBaseInitStructure.TIM_Period        = Timer_Period;
  TIM_TimeBaseInitStructure.TIM_Prescaler     = 0;
  TIM_TimeBaseInitStructure.TIM_ClockDivision = 0;
  TIM_TimeBaseInitStructure.TIM_CounterMode   = TIM_CounterMode_Up;
  TIM_TimeBaseInit(TIM6, &TIM_TimeBaseInitStructure);

  TIM_SelectOutputTrigger(TIM6, TIM_TRGOSource_Update);
  TIM_Cmd(TIM6, ENABLE);
}

void FG_DMA_Configure()
{
	DMA_InitTypeDef DMA_InitSturture;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1, ENABLE);

	DMA_DeInit(DMA1_Stream5);
	DMA_InitSturture.DMA_Channel            = DMA_Channel_7;
	DMA_InitSturture.DMA_PeripheralBaseAddr = 0x40007408;
	DMA_InitSturture.DMA_Memory0BaseAddr    = (uint32_t)&function;
	DMA_InitSturture.DMA_DIR                = DMA_DIR_MemoryToPeripheral;
	DMA_InitSturture.DMA_BufferSize         = Resolution;
	DMA_InitSturture.DMA_PeripheralInc      = DMA_PeripheralInc_Disable;
	DMA_InitSturture.DMA_MemoryInc          = DMA_MemoryInc_Enable;
	DMA_InitSturture.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
	DMA_InitSturture.DMA_MemoryDataSize     = DMA_MemoryDataSize_HalfWord;
	DMA_InitSturture.DMA_Mode               = DMA_Mode_Circular;
	DMA_InitSturture.DMA_Priority           = DMA_Priority_High;
	DMA_InitSturture.DMA_FIFOMode           = DMA_FIFOMode_Disable;
	DMA_InitSturture.DMA_FIFOThreshold      = DMA_FIFOThreshold_HalfFull;
	DMA_InitSturture.DMA_MemoryBurst        = DMA_MemoryBurst_Single;
	DMA_InitSturture.DMA_PeripheralBurst    = DMA_PeripheralBurst_Single;
	DMA_Init(DMA1_Stream5, &DMA_InitSturture);

	DMA_Cmd(DMA1_Stream5, ENABLE);
	DAC_DMACmd(DAC_Channel_1, ENABLE);
}

int main()
{

}
