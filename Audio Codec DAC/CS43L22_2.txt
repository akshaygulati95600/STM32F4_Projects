#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_i2c.h"
#include "stm32f4xx_spi.h"


#define CORE_I2C_ADDRESS 0x33
#define CODEC_I2C_ADDRESS 0x94

#define CODEC_MAPBYTE_INC 0x80

//register map bytes for CS42L22 (see page 35)

#define CODEC_MAP_CHIP_ID 								0x01
#define CODEC_MAP_PWR_CTRL1 							0x02
#define CODEC_MAP_PWR_CTRL2 							0x04
#define CODEC_MAP_CLK_CTRL  							0x05
#define CODEC_MAP_IF_CTRL1  							0x06
#define CODEC_MAP_IF_CTRL2  							0x07
#define CODEC_MAP_PASSTHROUGH_A_SELECT 					0x08
#define CODEC_MAP_PASSTHROUGH_B_SELECT 					0x09
#define CODEC_MAP_ANALOG_SET 							0x0A
#define CODEC_MAP_PASSTHROUGH_GANG_CTRL 				0x0C
#define CODEC_MAP_PLAYBACK_CTRL1 						0x0D
#define CODEC_MAP_MISC_CTRL 							0x0E
#define CODEC_MAP_PLAYBACK_CTRL2 						0x0F
#define CODEC_MAP_PASSTHROUGH_A_VOL						0x14
#define CODEC_MAP_PASSTHROUGH_B_VOL 					0x15
#define CODEC_MAP_PCMA_VOL 								0x1A
#define CODEC_MAP_PCMB_VOL 								0x1B
#define CODEC_MAP_BEEP_FREQ_ONTIME 						0x1C
#define CODEC_MAP_BEEP_VOL_OFFTIME 						0x1D
#define CODEC_MAP_BEEP_TONE_CFG 						0x1E
#define CODEC_MAP_TONE_CTRL 							0x1F
#define CODEC_MAP_MASTER_A_VOL 							0x20
#define CODEC_MAP_MASTER_B_VOL 							0x21
#define CODEC_MAP_HP_A_VOL 								0x22
#define CODEC_MAP_HP_B_VOL 								0x23
#define CODEC_MAP_SPEAK_A_VOL 							0x24
#define CODEC_MAP_SPEAK_B_VOL 							0x25
#define CODEC_MAP_CH_MIX_SWAP 							0x26
#define CODEC_MAP_LIMIT_CTRL1					 		0x27
#define CODEC_MAP_LIMIT_CTRL2 							0x28
#define CODEC_MAP_LIMIT_ATTACK 							0x29
#define CODEC_MAP_OVFL_CLK_STATUS 						0x2E
#define CODEC_MAP_BATT_COMP 							0x2F
#define CODEC_MAP_VP_BATT_LEVEL 						0x30
#define CODEC_MAP_SPEAK_STATUS 							0x31
#define CODEC_MAP_CHARGE_PUMP_FREQ 						0x34

void CS43L22_GPIO_Configure()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);

	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_DOWN;
	GPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOD, &GPIO_InitStructure);

	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_6|GPIO_Pin_9;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_OD;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_I2C1);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource9, GPIO_AF_I2C1);

	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_7|GPIO_Pin_10|GPIO_Pin_12;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_OType 	= GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOC, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_SPI3);
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SPI3);
	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SPI3);

	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_4;
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_PuPd 	= GPIO_PuPd_NOPULL;
	GPIO_InitStructure.GPIO_OType	= GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource4, GPIO_AF_SPI3);

	GPIO_ResetBits(GPIOD, GPIO_Pin_4);
}

void CS43L22_I2C_I2S_Configure()
{
	I2C_InitTypeDef I2C_InitStructure;
	I2S_InitTypeDef I2S_InitStructure;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1 , ENABLE);
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI3 , ENABLE);
	RCC_PLLI2SCmd(ENABLE);

	I2C_DeInit(I2C1);
	I2C_InitStructure.I2C_ClockSpeed 			= 100000;
	I2C_InitStructure.I2C_Mode 					= I2C_Mode_I2C;
	I2C_InitStructure.I2C_OwnAddress1 			= CORE_I2C_ADDRESS;
	I2C_InitStructure.I2C_Ack 					= I2C_Ack_Enable;
	I2C_InitStructure.I2C_AcknowledgedAddress 	= I2C_AcknowledgedAddress_7bit;
	I2C_InitStructure.I2C_DutyCycle 			= I2C_DutyCycle_2;
	I2C_Init(I2C1, &I2C_InitStructure);
	I2C_Cmd(I2C1, ENABLE);

	SPI_I2S_DeInit(SPI3);
	I2S_InitStructure.I2S_AudioFreq 			= I2S_AudioFreq_48k;
	I2S_InitStructure.I2S_MCLKOutput 			= I2S_MCLKOutput_Enable;
	I2S_InitStructure.I2S_DataFormat 			= I2S_DataFormat_16b;
	I2S_InitStructure.I2S_Mode 					= I2S_Mode_MasterTx;
	I2S_InitStructure.I2S_Standard 				= I2S_Standard_Phillips;
	I2S_InitStructure.I2S_CPOL 					= I2S_CPOL_Low;
	I2S_Init(SPI3, &I2S_InitStructure);
}

void send_codec_ctrl(uint8_t controlBytes[], uint8_t numBytes)
{
	uint8_t bytesSent=0;

	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY))
	{
		//just wait until no longer busy
	}

	I2C_GenerateSTART(I2C1, ENABLE);
	while (!I2C_GetFlagStatus(I2C1, I2C_FLAG_SB))
	{
		//wait for generation of start condition
	}
	I2C_Send7bitAddress(I2C1, CODEC_I2C_ADDRESS, I2C_Direction_Transmitter);
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
	{
		//wait for end of address transmission
	}
	while (bytesSent < numBytes)
	{
		I2C_SendData(I2C1, controlBytes[bytesSent]);
		bytesSent++;
		while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
		{
			//wait for transmission of byte
		}
	}
	while(!I2C_GetFlagStatus(I2C1, I2C_FLAG_BTF))
	{
	    //wait until it's finished sending before creating STOP
	}
	I2C_GenerateSTOP(I2C1, ENABLE);

}

uint8_t read_codec_register(uint8_t mapbyte)
{
	uint8_t receivedByte = 0;

	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
	I2C_GenerateSTART(I2C1, ENABLE);

	while (!I2C_GetFlagStatus(I2C1, I2C_FLAG_SB))
	I2C_Send7bitAddress(I2C1, CODEC_I2C_ADDRESS, I2C_Direction_Transmitter);

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED))
	I2C_SendData(I2C1, mapbyte); //sets the transmitter address

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTING))
	I2C_GenerateSTOP(I2C1, ENABLE);

	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY))
	I2C_AcknowledgeConfig(I2C1, DISABLE);

	I2C_GenerateSTART(I2C1, ENABLE);
	while (!I2C_GetFlagStatus(I2C1, I2C_FLAG_SB))
	{
		//wait for generation of start condition
	}

	I2C_Send7bitAddress(I2C1, CODEC_I2C_ADDRESS, I2C_Direction_Receiver);
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED))
	{
		//wait for end of address transmission
	}

	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED))
	{
		//wait until byte arrived
	}
	receivedByte = I2C_ReceiveData(I2C1);

	I2C_GenerateSTOP(I2C1, ENABLE);

	return receivedByte;
}

void CS43L22_Initialise()
{
	uint8_t CodecCommandBuffer[5];
	uint8_t regValue = 0xFF;

	GPIO_SetBits(GPIOD, GPIO_Pin_4);

	//ADD DELAY

	CodecCommandBuffer[0] = CODEC_MAP_PLAYBACK_CTRL1;
	CodecCommandBuffer[1] = 0x01;
	send_codec_ctrl(CodecCommandBuffer, 2);

	//begin initialization sequence (p. 32)
	CodecCommandBuffer[0] = 0x00;
	CodecCommandBuffer[1] = 0x99;
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = 0x47;
	CodecCommandBuffer[1] = 0x80;
	send_codec_ctrl(CodecCommandBuffer, 2);

	regValue = read_codec_register(0x32);

	CodecCommandBuffer[0] = 0x32;
	CodecCommandBuffer[1] = regValue | 0x80;
	send_codec_ctrl(CodecCommandBuffer, 2);

	regValue = read_codec_register(0x32);

	CodecCommandBuffer[0] = 0x32;
	CodecCommandBuffer[1] = regValue & (~0x80);
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = 0x00;
	CodecCommandBuffer[1] = 0x00;
	send_codec_ctrl(CodecCommandBuffer, 2);
	//end of initialization sequence

	CodecCommandBuffer[0] = CODEC_MAP_PWR_CTRL2;
	CodecCommandBuffer[1] = 0xAF;
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = CODEC_MAP_PLAYBACK_CTRL1;
	CodecCommandBuffer[1] = 0x70;
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = CODEC_MAP_CLK_CTRL;
	CodecCommandBuffer[1] = 0x81; //auto detect clock
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = CODEC_MAP_IF_CTRL1;
	CodecCommandBuffer[1] = 0x07;
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = 0x0A;
	CodecCommandBuffer[1] = 0x00;
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = 0x27;
	CodecCommandBuffer[1] = 0x00;
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = 0x1A | CODEC_MAPBYTE_INC;
	CodecCommandBuffer[1] = 0x0A;
	CodecCommandBuffer[2] = 0x0A;
	send_codec_ctrl(CodecCommandBuffer, 3);

	CodecCommandBuffer[0] = 0x1F;
	CodecCommandBuffer[1] = 0x0F;
	send_codec_ctrl(CodecCommandBuffer, 2);

	CodecCommandBuffer[0] = CODEC_MAP_PWR_CTRL1;
	CodecCommandBuffer[1] = 0x9E;
	send_codec_ctrl(CodecCommandBuffer, 2);

}

int main(void)
{
	SystemInit();

	CS43L22_GPIO_Configure();
	CS43L22_I2C_I2S_Configure();
	CS43L22_Initialise();
	I2S_Cmd(SPI3, ENABLE);

    while(1)
    {

    	if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE))
    	{
    		SPI_I2S_SendData(SPI3, 400000);
    	}

    }
}
