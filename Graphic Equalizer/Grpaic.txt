#include <STM32F4XX.H>
#include <STM32F4XX_RCC.H>
#include <STM32F4XX_TIM.H>
#include <STM32F4XX_ADC.H>
#include <STM32F4XX_DMA.H>
#include <STM32F4XX_GPIO.H>
#include <MISC.H>

#define ILI9341_COLOR_BLACK			0x0000
#define ILI9341_COLOR_WHITE			0xFFFF
#define ILI9341_COLOR_RED			0xF800
#define ILI9341_COLOR_GREEN			0x07E0
#define ILI9341_COLOR_GREEN_2		0xB723
#define ILI9341_COLOR_BLUE			0x001F
#define ILI9341_COLOR_BLUE_2		0x051D
#define ILI9341_COLOR_YELLOW		0xFFE0
#define ILI9341_COLOR_ORANGE		0xFBE4
#define ILI9341_COLOR_CYAN			0x07FF
#define ILI9341_COLOR_MAGENTA		0xA254
#define ILI9341_COLOR_GRAY			0x7BEF
#define ILI9341_COLOR_BROWN			0xBBCA
#define ILI9341_TRANSPARENT			0x80000000

#define ADC_Base_Address				0x4001204C

#define Vref							2.9375
#define Calibration						0
#define Offset							0

#define Sample_Size       				1024
#define Sample_Frequency 				20000
#define Timer_Prescaled_Frequency 		100000
#define Timer_Prescaler					(84000000/Timer_Prescaled_Frequency) - 1
#define Timer_Period					(Timer_Prescaled_Frequency/Sample_Frequency) - 1

__IO uint32_t TimingDelay;

volatile float32_t 	ADC_Buffer_1[Sample_Size];

void FFT_GPIO_Configure()
{
	 GPIO_InitTypeDef GPIO_InitStructre;
	 RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);

	 GPIO_InitStructre.GPIO_Pin = GPIO_Pin_1;
	 GPIO_InitStructre.GPIO_Speed = GPIO_Speed_50MHz;
	 GPIO_InitStructre.GPIO_Mode = GPIO_Mode_AN;
	 GPIO_InitStructre.GPIO_PuPd = GPIO_PuPd_NOPULL;
	 GPIO_Init(GPIOC, &GPIO_InitStructre);
}

void FFT_Timer_Configure()
{
	TIM_TimeBaseInitTypeDef TIM_TimeBaseInitStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

	TIM_TimeBaseInitStructure.TIM_Period        	= Timer_Period;
	TIM_TimeBaseInitStructure.TIM_Prescaler     	= Timer_Prescaler;
	TIM_TimeBaseInitStructure.TIM_ClockDivision 	= 0;
	TIM_TimeBaseInitStructure.TIM_CounterMode   	= TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseInitStructure);
	TIM_SelectOutputTrigger(TIM3, TIM_TRGOSource_Update);
	TIM_Cmd(TIM3, ENABLE);
}

void FFT_DMA_Configure()
{
	DMA_InitTypeDef       DMA_InitSturcture;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);

	DMA_InitSturcture.DMA_Channel 					= DMA_Channel_0;
	DMA_InitSturcture.DMA_PeripheralBaseAddr 		= ADC_Base_Address;
	DMA_InitSturcture.DMA_Memory0BaseAddr    		= (uint32_t)&ADC_Buffer[0];
	DMA_InitSturcture.DMA_DIR                		= DMA_DIR_PeripheralToMemory;
	DMA_InitSturcture.DMA_BufferSize         		= Sample_Size;
	DMA_InitSturcture.DMA_PeripheralInc      		= DMA_PeripheralInc_Disable;
	DMA_InitSturcture.DMA_MemoryInc          		= DMA_MemoryInc_Enable;
	DMA_InitSturcture.DMA_PeripheralDataSize 		= DMA_PeripheralDataSize_HalfWord;
	DMA_InitSturcture.DMA_MemoryDataSize     		= DMA_MemoryDataSize_HalfWord;
	DMA_InitSturcture.DMA_Mode               		= DMA_Mode_Circular;
	DMA_InitSturcture.DMA_Priority           		= DMA_Priority_High;
	DMA_InitSturcture.DMA_FIFOMode           		= DMA_FIFOMode_Disable;
	DMA_InitSturcture.DMA_FIFOThreshold      		= DMA_FIFOThreshold_HalfFull;
	DMA_InitSturcture.DMA_MemoryBurst        		= DMA_MemoryBurst_Single;
	DMA_InitSturcture.DMA_PeripheralBurst    		= DMA_PeripheralBurst_Single;
	
	DMA_Init(DMA2_Stream4, &DMA_InitSturcture);
	DMA_Cmd(DMA2_Stream4, ENABLE);
}

void FFT_ADC_Configure()
{
	ADC_InitTypeDef       ADC_InitStructure;
	ADC_CommonInitTypeDef ADC_CommonInitStructure;
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);

	ADC_InitStructure.ADC_Resolution           		= ADC_Resolution_12b;
	ADC_InitStructure.ADC_ExternalTrigConvEdge 		= ADC_ExternalTrigConvEdge_Rising;
	ADC_InitStructure.ADC_ExternalTrigConv     		= ADC_ExternalTrigConv_T3_TRGO;
	ADC_InitStructure.ADC_ScanConvMode         		= DISABLE;
	ADC_InitStructure.ADC_ContinuousConvMode   		= DISABLE;
	ADC_InitStructure.ADC_DataAlign            		= ADC_DataAlign_Right;
	ADC_InitStructure.ADC_NbrOfConversion      		= 1;
	ADC_Init(ADC1, &ADC_InitStructure);

	ADC_CommonInitStructure.ADC_Mode				= ADC_Mode_Independent;
	ADC_CommonInitStructure.ADC_Prescaler        	= ADC_Prescaler_Div2;
	ADC_CommonInitStructure.ADC_DMAAccessMode    	= ADC_DMAAccessMode_Disabled;
	ADC_CommonInitStructure.ADC_TwoSamplingDelay 	= ADC_TwoSamplingDelay_5Cycles;
	ADC_CommonInit(&ADC_CommonInitStructure);

	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 1, ADC_SampleTime_3Cycles);

	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
	ADC_DMACmd(ADC1, ENABLE);
	ADC_Cmd(ADC1, ENABLE);
}

void ILI9341_Draw_Vertical_Bar(uint16_t X, uint16_t Y, uint16_t Height, uint8_t Width, uint16_t Color)
{
	uint16_t i,j;

	ILI9341_Fill_Background(ILI9341_COLOR_BLACK);

	for(i=X;i<(Width-X);i++)
	{
		for (j=Y;j<(Height-Y);j++)
		{
			ILI9341_Draw_Pixel(i,j,Color);
		}
	}

}

void Delay(__IO uint32_t Time)
{
  TimingDelay = Time;
  while(TimingDelay !=0);
}

void SysTick_Handler(void)
{
  if(TimingDelay !=0)
  {
    TimingDelay --;
   }
}

int main()
{
	SystemInit();
	SysTick_Config(SystemCoreClock/1000000);

	ILI9341_GPIO_Configure();
	ILI9341_SPI_Configure();
	ILI9341_Initialise();

	FFT_GPIO_Configure();
	FFT_Timer_Configure();
	FFT_DMA_Configure();
	FFT_ADC_Configure();
	
	Delay(5000000);
	

}
