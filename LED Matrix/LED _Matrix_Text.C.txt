#include <STM32F4XX.H>
#include <STM32F4XX_RCC.H>
#include <STM32F4XX_TIM.H>
#include <STM32F4XX_SPI.H>
#include <STM32F4XX_GPIO.H>

__IO uint32_t TimingDelay;

uint8_t X_Position = 0;
uint8_t Matrix_Marquee_Buffer[256];
unsigned char Matrix_Buffer[32];

unsigned char Font_6X8[][6] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00 , 0x00 },   // space
    { 0x00, 0x00, 0x2f, 0x00, 0x00 , 0x00 },   // !
    { 0x00, 0x07, 0x00, 0x07, 0x00 , 0x00 },   // "
    { 0x14, 0x7f, 0x14, 0x7f, 0x14 , 0x00 },   // #
    { 0x24, 0x2a, 0x7f, 0x2a, 0x12 , 0x00 },   // $
    { 0x62, 0x64, 0x08, 0x13, 0x23 , 0x00 },   // %
    { 0x36, 0x49, 0x55, 0x22, 0x50 , 0x00 },   // &
    { 0x00, 0x05, 0x03, 0x00, 0x00 , 0x00 },   // '
    { 0x00, 0x1c, 0x22, 0x41, 0x00 , 0x00 },   // (
    { 0x00, 0x41, 0x22, 0x1c, 0x00 , 0x00 },   // )
    { 0x14, 0x08, 0x3E, 0x08, 0x14 , 0x00 },   // *
    { 0x08, 0x08, 0x3E, 0x08, 0x08 , 0x00 },   // +
    { 0x00, 0x00, 0xA0, 0x60, 0x00 , 0x00 },   // ,
    { 0x08, 0x08, 0x08, 0x08, 0x08 , 0x00 },   // -
    { 0x00, 0x60, 0x60, 0x00, 0x00 , 0x00 },   // .
    { 0x20, 0x10, 0x08, 0x04, 0x02 , 0x00 },   // /
    { 0x3E, 0x51, 0x49, 0x45, 0x3E , 0x00 },   // 0
    { 0x00, 0x42, 0x7F, 0x40, 0x00 , 0x00 },   // 1
    { 0x42, 0x61, 0x51, 0x49, 0x46 , 0x00 },   // 2
    { 0x21, 0x41, 0x45, 0x4B, 0x31 , 0x00 },   // 3
    { 0x18, 0x14, 0x12, 0x7F, 0x10 , 0x00 },   // 4
    { 0x27, 0x45, 0x45, 0x45, 0x39 , 0x00 },   // 5
    { 0x3C, 0x4A, 0x49, 0x49, 0x30 , 0x00 },   // 6
    { 0x01, 0x71, 0x09, 0x05, 0x03 , 0x00 },   // 7
    { 0x36, 0x49, 0x49, 0x49, 0x36 , 0x00 },   // 8
    { 0x06, 0x49, 0x49, 0x29, 0x1E , 0x00 },   // 9
    { 0x00, 0x36, 0x36, 0x00, 0x00 , 0x00 },   // :
    { 0x00, 0x56, 0x36, 0x00, 0x00 , 0x00 },   // ;
    { 0x08, 0x14, 0x22, 0x41, 0x00 , 0x00 },   // <
    { 0x14, 0x14, 0x14, 0x14, 0x14 , 0x00 },   // =
    { 0x00, 0x41, 0x22, 0x14, 0x08 , 0x00 },   // >
    { 0x02, 0x01, 0x51, 0x09, 0x06 , 0x00 },   // ?
    { 0x32, 0x49, 0x59, 0x51, 0x3E , 0x00 },   // @
    { 0x7C, 0x12, 0x11, 0x12, 0x7C , 0x00 },   // A
    { 0x7F, 0x49, 0x49, 0x49, 0x36 , 0x00 },   // B
    { 0x3E, 0x41, 0x41, 0x41, 0x22 , 0x00 },   // C
    { 0x7F, 0x41, 0x41, 0x22, 0x1C , 0x00 },   // D
    { 0x7F, 0x49, 0x49, 0x49, 0x41 , 0x00 },   // E
    { 0x7F, 0x09, 0x09, 0x09, 0x01 , 0x00 },   // F
    { 0x3E, 0x41, 0x49, 0x49, 0x7A , 0x00 },   // G
    { 0x7F, 0x08, 0x08, 0x08, 0x7F , 0x00 },   // H
    { 0x00, 0x41, 0x7F, 0x41, 0x00 , 0x00 },   // I
    { 0x20, 0x40, 0x41, 0x3F, 0x01 , 0x00 },   // J
    { 0x7F, 0x08, 0x14, 0x22, 0x41 , 0x00 },   // K
    { 0x7F, 0x40, 0x40, 0x40, 0x40 , 0x00 },   // L
    { 0x7F, 0x02, 0x0C, 0x02, 0x7F , 0x00 },   // M
    { 0x7F, 0x04, 0x08, 0x10, 0x7F , 0x00 },   // N
    { 0x3E, 0x41, 0x41, 0x41, 0x3E , 0x00 },   // O
    { 0x7F, 0x09, 0x09, 0x09, 0x06 , 0x00 },   // P
    { 0x3E, 0x41, 0x51, 0x21, 0x5E , 0x00 },   // Q
    { 0x7F, 0x09, 0x19, 0x29, 0x46 , 0x00 },   // R
    { 0x46, 0x49, 0x49, 0x49, 0x31 , 0x00 },   // S
    { 0x01, 0x01, 0x7F, 0x01, 0x01 , 0x00 },   // T
    { 0x3F, 0x40, 0x40, 0x40, 0x3F , 0x00 },   // U
    { 0x1F, 0x20, 0x40, 0x20, 0x1F , 0x00 },   // V
    { 0x3F, 0x40, 0x38, 0x40, 0x3F , 0x00 },   // W
    { 0x63, 0x14, 0x08, 0x14, 0x63 , 0x00 },   // X
    { 0x07, 0x08, 0x70, 0x08, 0x07 , 0x00 },   // Y
    { 0x61, 0x51, 0x49, 0x45, 0x43 , 0x00 },   // Z
    { 0x00, 0x7F, 0x41, 0x41, 0x00 , 0x00 },   // [
    { 0x55, 0x2A, 0x55, 0x2A, 0x55 , 0x00 },   // "\"
    { 0x00, 0x41, 0x41, 0x7F, 0x00 , 0x00 },   // ]
    { 0x04, 0x02, 0x01, 0x02, 0x04 , 0x00 },   // ^
    { 0x40, 0x40, 0x40, 0x40, 0x40 , 0x00 },   // _
    { 0x00, 0x01, 0x02, 0x04, 0x00 , 0x00 },   // '
    { 0x20, 0x54, 0x54, 0x54, 0x78 , 0x00 },   // a
    { 0x7F, 0x48, 0x44, 0x44, 0x38 , 0x00 },   // b
    { 0x38, 0x44, 0x44, 0x44, 0x20 , 0x00 },   // c
    { 0x38, 0x44, 0x44, 0x48, 0x7F , 0x00 },   // d
    { 0x38, 0x54, 0x54, 0x54, 0x18 , 0x00 },   // e
    { 0x08, 0x7E, 0x09, 0x01, 0x02 , 0x00 },   // f
    { 0x18, 0xA4, 0xA4, 0xA4, 0x7C , 0x00 },   // g
    { 0x7F, 0x08, 0x04, 0x04, 0x78 , 0x00 },   // h
    { 0x00, 0x44, 0x7D, 0x40, 0x00 , 0x00 },   // i
    { 0x40, 0x80, 0x84, 0x7D, 0x00 , 0x00 },   // j
    { 0x7F, 0x10, 0x28, 0x44, 0x00 , 0x00 },   // k
    { 0x00, 0x41, 0x7F, 0x40, 0x00 , 0x00 },   // l
    { 0x7C, 0x04, 0x18, 0x04, 0x78 , 0x00 },   // m
    { 0x7C, 0x08, 0x04, 0x04, 0x78 , 0x00 },   // n
    { 0x38, 0x44, 0x44, 0x44, 0x38 , 0x00 },   // o
    { 0xFC, 0x24, 0x24, 0x24, 0x18 , 0x00 },   // p
    { 0x18, 0x24, 0x24, 0x18, 0xFC , 0x00 },   // q
    { 0x7C, 0x08, 0x04, 0x04, 0x08 , 0x00 },   // r
    { 0x48, 0x54, 0x54, 0x54, 0x20 , 0x00 },   // s
    { 0x04, 0x3F, 0x44, 0x40, 0x20 , 0x00 },   // t
    { 0x3C, 0x40, 0x40, 0x20, 0x7C , 0x00 },   // u
    { 0x1C, 0x20, 0x40, 0x20, 0x1C , 0x00 },   // v
    { 0x3C, 0x40, 0x30, 0x40, 0x3C , 0x00 },   // w
    { 0x44, 0x28, 0x10, 0x28, 0x44 , 0x00 },   // x
    { 0x1C, 0xA0, 0xA0, 0xA0, 0x7C , 0x00 },   // y
    { 0x44, 0x64, 0x54, 0x4C, 0x44 , 0x00 }    // z
};

void HC595_GPIO_Configure()
{
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13|GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOB, &GPIO_InitStructure);

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource13, GPIO_AF_SPI2);
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource15, GPIO_AF_SPI2);

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_DOWN;
	GPIO_Init(GPIOB, &GPIO_InitStructure);
}

void HC595_SPI_Configure()
{
	SPI_InitTypeDef SPI_InitStructure;
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_SPI2, ENABLE);

	SPI_InitStructure.SPI_Direction = SPI_Direction_1Line_Tx;
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_LSB;
	SPI_Init(SPI2, &SPI_InitStructure);
	SPI_Cmd(SPI2, ENABLE);
}

void HC595_Send(char Data)
{
	SPI_I2S_SendData(SPI2, Data);
	while (!SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_TXE));
	while (SPI_I2S_GetFlagStatus(SPI2, SPI_I2S_FLAG_BSY));
	GPIO_SetBits(GPIOB, GPIO_Pin_14);
	GPIO_ResetBits(GPIOB, GPIO_Pin_14);
}

void Matrix_Write_Buffer()
{
	uint8_t i;
	uint16_t Coloumn = 0;

	for(i=0;i<=16;i++)
	{
		Coloumn = pow(2,i);
		HC595_Send(Matrix_Buffer[15-i]);
		HC595_Send(Matrix_Buffer[31-i]);
		HC595_Send(Coloumn);
		HC595_Send(Coloumn>>8);
		Delay(1);
	}

}
void Matrix_Write_Character(char Data)
{
	uint8_t i = 0;

	Data = Data - 32;

	if(X_Position >= 15)
	{
		X_Position = 0;
	}

	for(i=0;i<=5;i++)
	{
		Matrix_Buffer[31-X_Position] = Font_6X8[Data][i];
		X_Position++;
	}

}

void Matrix_Write_String(char *Data)
{
	char Element;
	while (*Data != '\0')
	{
		Element = *Data;
		Element = Element - 32;
		Matrix_Write_Character(Element);
		Data++;
	}
}
void Matrix_Write_Marquee(char *Data, uint16_t Delay)
{
	uint8_t i = 0,j = 0,k = 0;
	char Element;

	while (*Data != '\0')
	{
		Element = *Data;
		Element = Element - 32;

		for(i=0;i<6;i++)
		{
			Matrix_Marquee_Buffer[j] = Font_6X8[Element][i];
			j++;
		}

		Data++;
	}

	for(i=0;i<j;i++)
	{
		for(k=0;k<16;k++)
		{
			Matrix_Buffer[31-k]=Matrix_Marquee_Buffer[k+i];
		}

		for(k=0;k<Delay;k++)
		{
			Matrix_Write_Buffer();
		}
	}
}
void Matrix_Clear()
{
	uint8_t i = 0;
	for(i=0;i<10;i++)
	{
		Matrix_Write_Character(' ');
	}
}

void Delay(__IO uint32_t Time)
{
  TimingDelay = Time;
  while(TimingDelay !=0);
}

void SysTick_Handler(void)
{
  if(TimingDelay !=0)
  {
    TimingDelay --;
   }
}

int main(void)
{
	SystemInit();
	SysTick_Config(SystemCoreClock/1000);

	HC595_GPIO_Configure();
	HC595_SPI_Configure();

	uint8_t i;

	for(i=0;i<32;i++)
	{
		Matrix_Buffer[i] = 0x00;
	}

	Matrix_Write_Marquee("SUP,DISHA?",10);
}

